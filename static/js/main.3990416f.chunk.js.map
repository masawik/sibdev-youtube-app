{"version":3,"sources":["Components/Layout/Header/Header.module.css","Components/Layout/SearchPage/SearchPage.module.css","Components/Layout/SearchPage/Search/Search.module.css","Components/sharedImgs/logo.svg","redux/user/userTypes.ts","redux/api/utils.ts","redux/api/fakeServer/localStorageAsDB.ts","redux/api/fakeServer/fakeServer.ts","redux/api/userAPI.ts","redux/localStorageUtils.ts","redux/shared/sharedTypes.ts","redux/shared/sharedActions.ts","redux/favourites/favouritesTypes.ts","redux/api/favouritesListAPI.ts","redux/favouritesModal/favouritesModalTypes.ts","redux/favouritesModal/favouritesModalActions.ts","redux/favourites/favouritesActions.ts","redux/user/userActions.ts","Components/Layout/Header/Header.tsx","Components/Layout/FavouritesModal/FavouritesModal.tsx","constants.ts","hooks/useToken.ts","Components/Layout/Layout.tsx","Components/Login/LoginForm/LoginForm.tsx","Components/Login/LoginPage/LoginPage.tsx","Components/Layout/Favourites/FavouritesItem/FavouritesItem.tsx","Components/Layout/Favourites/Favourites.tsx","Components/Layout/SearchPage/Search/Search.tsx","Components/Layout/SearchPage/VideoList/VideoItem/VideoItem.tsx","Components/Layout/SearchPage/VideoList/VideoList.tsx","hooks/useVideoListLastViewMode.ts","redux/search/searchTypes.ts","redux/api/youtubeAPI.ts","redux/search/searchActions.ts","Components/Layout/SearchPage/SearchPage.tsx","hooks/useQuery.ts","App.tsx","hooks/useAlert.ts","redux/user/userReducer.ts","redux/search/searchReducer.ts","redux/alert/alertReducer.ts","redux/favourites/favouritesReducer.ts","redux/favouritesModal/favouritesModalReducer.ts","redux/rootReducer.ts","index.tsx","Components/Login/LoginForm/LoginForm.module.css","Components/Layout/SearchPage/VideoList/VideoList.module.css","Components/Layout/SearchPage/VideoList/VideoItem/VideoItem.module.css","Components/Layout/Favourites/Favourites.module.css","Components/Layout/FavouritesModal/FavouriteModal.module.css","Components/Login/LoginPage/LoginPage.module.css"],"names":["module","exports","USER_FETCHING_START","USER_FETCHING_FINISH","USER_SET_TOKEN","utils","Math","random","toString","substring","min","max","floor","TOKEN_BY_LOGIN","DB_FAVOURITES_LISTS","lsDB","addUserToken","login","token","newStateItem","prevStateStr","localStorage","getItem","newStateObj","JSON","parse","newStateStr","stringify","setItem","getLoginByToken","DbStr","Db","Object","entries","record","getFavouritesList","favouritesListsDbStr","favouritesListsDb","favouritesListUpdate","list","newLists","favouritesListAddRecord","prevList","newList","favouritesListDeleteRecord","id","filter","i","favouritesListEditRecord","map","users_DB","users_JSON","createResponse","data","success","createError","code","message","EUserApiErrors","lag","fakeServer","password","Promise","resolve","setTimeout","userNotExist","wrongPassword","tokenInvalid","newRecordId","recordToDb","userAPI","loginData","TOKEN","localStorageUtils","removeItem","CLEAR_ALL_STATES","SET_ALERT_MESSAGE","CLEAR_ALERT_MESSAGE","sharedClearAllStates","type","onAlert","duration","dispatch","payload","sharedShowErrorMessage","FAVOURITES_FETCHING_START","FAVOURITES_FETCHING_FINISH","FAVOURITES_SET_LIST","FAVOURITES_ADD_RECORD","FAVOURITES_DELETE_RECORD","favouritesListAPI","newRecord","FAVOURITES_MODAL_OPEN","FAVOURITES_MODAL_CLOSE","FAVOURITES_MODAL_FETCHING_START","FAVOURITES_MODAL_FETCHING_FINISH","FAVOURITES_MODAL_FILL_DATA","onFavouritesModalOpen","query","onFavouritesModalClose","onFavouritesModalOpenEdit","getState","favourites","items","editingItem","sort","name","maxCount","favouritesModalFillData","favouritesFetchingStart","favouritesFetchingFinish","favouritesAddRecord","favouritesDeleteRecord","onFavouritesListLoad","a","user","result","favouritesList","userSetToken","Header","pathname","useLocation","useDispatch","logout","useCallback","className","styles","header","align","cn","logo","src","LOGO","alt","menu","theme","mode","selectedKeys","Item","to","onClick","$sortOptions","value","description","Option","FavouritesModal","useForm","form","useSelector","state","favouritesModal","isVisible","isFetching","recordId","useState","maxCountValue","setMaxCountValue","useEffect","resetFields","onMaxCountChange","isNaN","onClose","onSubmit","val","fullRecord","onFavouritesListAddRecord","formInitialValues","visible","centered","closable","footer","getContainer","titleBox","justify","title","layout","onFinish","initialValues","label","labelMuted","rules","required","disabled","Boolean","placeholder","firstSelectOption","flex","onChange","Number","btn","htmlType","loading","SEARCH","LOGIN","TITLE_BASE","useToken","storeToken","getToken","Content","AntdLayout","Layout","children","PASSWORD","INPUT_VALIDATION_RULES","whitespace","LoginForm","values","requiredMark","Password","btnBox","CONTAINER_LAYOUT","xxl","xl","lg","md","sm","xs","FORM_BOX_LAYOUT","LoginPage","document","style","height","container","formBox","FavouritesItem","onDelete","onEdit","liRef","useRef","ref","e","target","current","listItem","buttons","danger","Favourites","history","useHistory","$list","push","spinning","tip","length","HEARTH_ICON_COLOR","$savedSuffixPopoverContent","popoverBox","popoverText","Search","search","currentQuery","isReadyToShow","isSavedMessageVisible","setQuery","submitHandler","inputHandler","onOpenModal","$suffix","content","placement","color","enterButton","suffix","onSearch","VideoItem","views","channelName","previewURL","isCardMode","viewMode","substr","card","preview","body","VideoList","lastViewMode","useLastViewMode","setViewMode","videos","totalResults","$videoList","videoItem","viewsStr","String","snippet","channelTitle","thumbnails","medium","url","videoId","listTitle","count","viewSelectorIcon","viewSelectorIcon_selected","gutter","SEARCH_FETCHING_START","SEARCH_FETCHING_FINISH","SEARCH_SET_VIDEOS","SEARCH_SET_QUERY","SEARCH_SET_TOTAL_RESULTS","SEARCH_SET_READY_TO_SHOW","YOUTUBE_API_KEY","instance","axios","create","baseURL","youtubeSearchAPI","maxResults","order","encodeURIComponent","searchParams","get","then","res","catch","response","ids","searchFetchingFinish","searchSetQuery","SearchPage","URLSearchParams","error","videosResult","videoIds","videosStatResult","resultVideoList","replaceAll","ivs","videoStat","statistics","viewCount","pageInfo","searchColSpan","controlBox","minified","span","App","alert","useAlert","basename","path","initialState","userReducer","action","errorMessage","searchReducer","alertReducer","favouritesReducer","filteredList","favouritesModalReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","app","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3990416f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1105z\",\"logo\":\"Header_logo__24EJi\",\"menu\":\"Header_menu__1kOpx\",\"logout\":\"Header_logout__34Qp3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"minified\":\"SearchPage_minified__1875q\",\"titleBox\":\"SearchPage_titleBox__355xg\",\"title\":\"SearchPage_title__1U_bS\",\"controlBox\":\"SearchPage_controlBox__8WbWe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"popoverBox\":\"Search_popoverBox__1h7BF\",\"popoverText\":\"Search_popoverText__YOxKd\"};","export default __webpack_public_path__ + \"static/media/logo.380272e2.svg\";","import {ThunkAction} from \"redux-thunk\";\r\nimport {TRootState} from \"../rootReducer\";\r\nimport {TSharedActions} from \"../shared/sharedTypes\";\r\n\r\nexport const USER_FETCHING_START = 'USER_FETCHING_START'\r\nexport const USER_FETCHING_FINISH = 'USER_FETCHING_FINISH'\r\nexport const USER_SET_TOKEN = 'USER_SET_TOKEN'\r\n\r\nexport type TUserFetchingStart = { type: typeof USER_FETCHING_START }\r\nexport type TUserFetchingFinish = { type: typeof USER_FETCHING_FINISH }\r\nexport type TUserSetToken = { type: typeof USER_SET_TOKEN, payload: { token: string } }\r\n\r\nexport type TUserLoginData = { login: string, password: string }\r\n\r\nexport type TUserActions =\r\n  TUserFetchingStart\r\n  | TUserFetchingFinish\r\n  | TUserSetToken\r\n  | TSharedActions\r\n\r\nexport type TUserThunk = ThunkAction<void, TRootState, unknown, TUserActions>","export const utils = {\r\n  randString() {\r\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n  },\r\n\r\n  randInt(min: number, max: number) {\r\n    return Math.floor(min + Math.random() * (max + 1 - min));\r\n  }\r\n}","import {IFavouritesItem} from \"../../favourites/favouritesTypes\";\r\nconst TOKEN_BY_LOGIN = 'TOKEN_BY_LOGIN'\r\nconst DB_FAVOURITES_LISTS = 'DB_FAVOURITES_LISTS'\r\n\r\ntype TUsersDB = {\r\n  [key: string]: string\r\n}\r\n\r\ntype TFavouritesListsDB = {\r\n  [key: string]: IFavouritesItem[]\r\n}\r\n\r\ntype TLsDB = {\r\n  addUserToken: (login: string, token: string) => void,\r\n  getLoginByToken: (token: string) => string | false,\r\n  getFavouritesList: (login: string) => IFavouritesItem[],\r\n  favouritesListUpdate: (login: string, list: IFavouritesItem[]) => void,\r\n  favouritesListAddRecord: (login: string, record: IFavouritesItem) => void,\r\n  favouritesListDeleteRecord: (login: string, id: string) => void,\r\n  favouritesListEditRecord: (login: string, record: IFavouritesItem) => void,\r\n}\r\n\r\nexport const lsDB: TLsDB = {\r\n  addUserToken: (login, token) => {\r\n    const newStateItem = {[login]: token}\r\n    const prevStateStr = localStorage.getItem(TOKEN_BY_LOGIN)\r\n    const newStateObj = prevStateStr ? {...JSON.parse(prevStateStr), ...newStateItem} : {...newStateItem}\r\n    const newStateStr = JSON.stringify(newStateObj)\r\n    localStorage.setItem(TOKEN_BY_LOGIN, newStateStr)\r\n  },\r\n\r\n  getLoginByToken: (token) => {\r\n    const DbStr = localStorage.getItem(TOKEN_BY_LOGIN)\r\n    if (!DbStr) return false\r\n    const Db: TUsersDB = JSON.parse(DbStr)\r\n    for (const record of Object.entries(Db)) {\r\n      if (token === record[1]) {\r\n        return record[0]\r\n      }\r\n    }\r\n    return false\r\n  },\r\n\r\n  getFavouritesList: (login) => {\r\n    const favouritesListsDbStr = localStorage.getItem(DB_FAVOURITES_LISTS)\r\n    if (!favouritesListsDbStr) return []\r\n    const favouritesListsDb: TFavouritesListsDB = JSON.parse(favouritesListsDbStr)\r\n    if (!favouritesListsDb[login]) return []\r\n    return favouritesListsDb[login]\r\n  },\r\n\r\n  favouritesListUpdate: (login, list) => {\r\n    const favouritesListsDbStr = localStorage.getItem(DB_FAVOURITES_LISTS)\r\n    let newLists: TFavouritesListsDB = {}\r\n    if (favouritesListsDbStr) {\r\n      newLists = {...newLists, ...JSON.parse(favouritesListsDbStr)}\r\n    }\r\n    newLists = {...newLists, [login]: list}\r\n    localStorage.setItem(DB_FAVOURITES_LISTS, JSON.stringify(newLists))\r\n  },\r\n\r\n  favouritesListAddRecord: (login, record) => {\r\n    const prevList: IFavouritesItem[] = lsDB.getFavouritesList(login)\r\n    const newList = [...prevList, record]\r\n    lsDB.favouritesListUpdate(login, newList)\r\n  },\r\n\r\n  favouritesListDeleteRecord: (login, id) => {\r\n    const prevList: IFavouritesItem[] = lsDB.getFavouritesList(login)\r\n    const newList = prevList.filter(i => i.id !== id)\r\n    lsDB.favouritesListUpdate(login, newList)\r\n  },\r\n\r\n  favouritesListEditRecord: (login, record) => {\r\n    const favList: IFavouritesItem[] = lsDB.getFavouritesList(login)\r\n    const newList = favList.map((i) => {\r\n      if (i.id === record.id) return record\r\n      return i\r\n    })\r\n    lsDB.favouritesListUpdate(login, newList)\r\n  }\r\n}","import {TUserLoginData} from \"../../user/userTypes\";\r\nimport users_JSON from './users.json'\r\nimport {utils} from \"../utils\";\r\nimport {lsDB} from \"./localStorageAsDB\";\r\nimport {EUserApiErrors, TResponse, TUserResponseError, TUserResponseSuccess} from \"../userAPI\";\r\nimport {IFavouritesItem, IFavouritesItemToServer} from \"../../favourites/favouritesTypes\";\r\n\r\nconst users_DB: { [index: string]: string } = users_JSON\r\n\r\nfunction createResponse<T>(data: T): TUserResponseSuccess<T> {\r\n  return {success: true, data}\r\n}\r\n\r\nfunction createError(code: EUserApiErrors, message: string): TUserResponseError {\r\n  return {success: false, message}\r\n}\r\n\r\nconst lag = utils.randInt(0,0)\r\n\r\ntype TFakeServer = {\r\n  login: (data: TUserLoginData) => Promise<TResponse<string>>,\r\n  getLoginByToken: (token: string) => Promise<TResponse<string>>,\r\n  getFavouritesList: (token: string) => Promise<TResponse<IFavouritesItem[]>>,\r\n  favouritesListAddRecord: (token: string, record: IFavouritesItemToServer) => Promise<TResponse<{id: string}>>,\r\n  favouritesListDeleteRecord: (token: string, id: string) => Promise<TResponse<'ok'>>,\r\n  favouritesListEditRecord: (token: string, record: IFavouritesItem) => Promise<TResponse<'ok'>>,\r\n}\r\n\r\nexport const fakeServer: TFakeServer = {\r\n  login: ({login, password}) =>\r\n    new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        if (!users_DB[login]) return resolve(createError(EUserApiErrors.userNotExist, 'user not exist'))\r\n        if (users_DB[login] !== password) return resolve(createError(EUserApiErrors.wrongPassword, 'wrong password'))\r\n        const token = utils.randString()\r\n        lsDB.addUserToken(login, token)\r\n        resolve(createResponse(token))\r\n      }, lag)\r\n    }),\r\n\r\n  getLoginByToken: (token) =>\r\n    new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const login = lsDB.getLoginByToken(token)\r\n        if (!login) return resolve(createError(EUserApiErrors.tokenInvalid, 'token is invalid'))\r\n        return resolve(createResponse(login))\r\n      }, lag)\r\n    }),\r\n\r\n  getFavouritesList: (token) =>\r\n    new Promise((resolve) => {\r\n      const login = lsDB.getLoginByToken(token)\r\n      if (!login) return resolve(createError(EUserApiErrors.tokenInvalid, 'token is invalid'))\r\n      return resolve(createResponse(lsDB.getFavouritesList(login)))\r\n    }),\r\n\r\n  favouritesListAddRecord: (token, record) =>\r\n    new Promise((resolve) => {\r\n      const login = lsDB.getLoginByToken(token)\r\n      if (!login) return resolve(createError(EUserApiErrors.tokenInvalid, 'token is invalid'))\r\n      const newRecordId = utils.randString()\r\n      const recordToDb: IFavouritesItem = {...record, id: newRecordId}\r\n      lsDB.favouritesListAddRecord(login, recordToDb)\r\n      return resolve(createResponse({id: newRecordId}))\r\n    }),\r\n\r\n  favouritesListDeleteRecord: (token, id) =>\r\n    new Promise((resolve) => {\r\n      const login = lsDB.getLoginByToken(token)\r\n      if (!login) return resolve(createError(EUserApiErrors.tokenInvalid, 'token is invalid'))\r\n      lsDB.favouritesListDeleteRecord(login, id)\r\n      return resolve(createResponse('ok'))\r\n    }),\r\n\r\n  favouritesListEditRecord: (token, record) =>\r\n    new Promise((resolve) => {\r\n      const login = lsDB.getLoginByToken(token)\r\n      if (!login) return resolve(createError(EUserApiErrors.tokenInvalid, 'token is invalid'))\r\n      lsDB.favouritesListEditRecord(login, record)\r\n      return resolve(createResponse('ok'))\r\n    })\r\n}","import {TUserLoginData} from \"../user/userTypes\";\r\nimport {fakeServer} from \"./fakeServer/fakeServer\";\r\n\r\nexport enum EUserApiErrors {\r\n  userNotExist = 1,\r\n  wrongPassword = 2,\r\n  tokenInvalid = 3\r\n}\r\n\r\nexport type TUserResponseSuccess<T> = {\r\n  success: true,\r\n  data: T\r\n}\r\n\r\nexport type TUserResponseError = {\r\n  success: false,\r\n  message: string\r\n}\r\n\r\nexport type TResponse<T> = TUserResponseSuccess<T> | TUserResponseError\r\n\r\n\r\ntype TUserAPI = {\r\n  login: (loginData: TUserLoginData) => Promise<TResponse<string>>\r\n}\r\n\r\nexport const userAPI: TUserAPI = {\r\n  login: (loginData) => {\r\n    return fakeServer.login(loginData)\r\n  },\r\n}","const TOKEN = 'token'\r\n\r\nexport const localStorageUtils = {\r\n  setToken: (token: string) => {\r\n    return localStorage.setItem(TOKEN, token)\r\n  },\r\n  getToken: () => {\r\n    return localStorage.getItem(TOKEN)\r\n  },\r\n  clearToken: () => {\r\n    return localStorage.removeItem(TOKEN)\r\n  }\r\n}\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {TRootState} from \"../rootReducer\";\r\n\r\nexport const CLEAR_ALL_STATES = 'CLEAR_ALL_STATES'\r\nexport const SET_ALERT_MESSAGE = 'SET_ALERT_MESSAGE'\r\nexport const CLEAR_ALERT_MESSAGE = 'CLEAR_ALERT_MESSAGE'\r\nexport type TSharedAlertTypes = 'success' | 'error' | 'warning'\r\n\r\nexport type TSharedClearAllStates = {type: typeof CLEAR_ALL_STATES}\r\nexport type TSharedSetAlertMessage = { type: typeof SET_ALERT_MESSAGE, payload: {message: string, type: TSharedAlertTypes, duration: number} }\r\nexport type TSharedClearAlertMessage = { type: typeof CLEAR_ALERT_MESSAGE }\r\n\r\nexport type TSharedActions = TSharedClearAllStates | TSharedSetAlertMessage | TSharedClearAlertMessage\r\nexport type TSharedThunk = ThunkAction<void, TRootState, unknown, TSharedActions>","import {\r\n  CLEAR_ALERT_MESSAGE,\r\n  CLEAR_ALL_STATES,\r\n  SET_ALERT_MESSAGE,\r\n  TSharedAlertTypes,\r\n  TSharedClearAlertMessage,\r\n  TSharedClearAllStates,\r\n  TSharedSetAlertMessage, TSharedThunk\r\n} from \"./sharedTypes\";\r\n\r\nexport const sharedClearAllStates = (): TSharedClearAllStates => ({type: CLEAR_ALL_STATES})\r\nconst sharedShowErrorMessage = (message: string, type: TSharedAlertTypes, duration: number): TSharedSetAlertMessage => ({\r\n  type: SET_ALERT_MESSAGE,\r\n  payload: {message, type, duration}\r\n})\r\nconst sharedClearAlertMessage = (): TSharedClearAlertMessage => ({type: CLEAR_ALERT_MESSAGE})\r\n\r\nexport const onAlert = (message: string, type: TSharedAlertTypes, duration?: number): TSharedThunk => dispatch => {\r\n  if (!duration) duration = 1.5\r\n  dispatch(sharedShowErrorMessage(message, type, duration))\r\n  setTimeout(() => {\r\n    dispatch(sharedClearAlertMessage())\r\n  }, duration)\r\n}","import {TSharedActions} from \"../shared/sharedTypes\"\r\nimport {TSearchOrder} from \"../api/youtubeAPI\"\r\nimport {ThunkAction} from \"redux-thunk\"\r\nimport {TRootState} from \"../rootReducer\"\r\nimport {\r\n  TFavouritesModalClose,\r\n  TFavouritesModalFetchingFinish,\r\n  TFavouritesModalFetchingStart\r\n} from \"../favouritesModal/favouritesModalTypes\";\r\nimport {TSearchFetchingStart} from \"../search/searchTypes\";\r\n\r\nexport const FAVOURITES_FETCHING_START = 'FAVOURITES_FETCHING_START'\r\nexport const FAVOURITES_FETCHING_FINISH = 'FAVOURITES_FETCHING_FINISH'\r\nexport const FAVOURITES_SET_LIST = 'FAVOURITES_SET_LIST'\r\nexport const FAVOURITES_ADD_RECORD = 'FAVOURITES_ADD_RECORD'\r\nexport const FAVOURITES_DELETE_RECORD = 'FAVOURITES_DELETE_RECORD'\r\n\r\n//обьект для отправки на сервер. без id\r\nexport interface IFavouritesItemToServer {\r\n  query: string,\r\n  name: string,\r\n  sort: TSearchOrder\r\n  maxCount: number\r\n}\r\n\r\n//полноценный обьект с полученным от сервера id\r\nexport interface IFavouritesItem extends IFavouritesItemToServer {\r\n  id: string\r\n}\r\n\r\nexport type TFavouritesFetchingStart = { type: typeof FAVOURITES_FETCHING_START }\r\nexport type TFavouritesFetchingFinish = { type: typeof FAVOURITES_FETCHING_FINISH }\r\nexport type TFavouritesSetList = { type: typeof FAVOURITES_SET_LIST, payload: {favouritesList: IFavouritesItem[]}}\r\nexport type TFavouritesAddRecord = { type: typeof FAVOURITES_ADD_RECORD, payload: {record: IFavouritesItem} }\r\nexport type TFavouritesDeleteRecord = { type: typeof FAVOURITES_DELETE_RECORD, payload: {id: string} }\r\n\r\nexport type TFavouritesActions =\r\n  TFavouritesSetList\r\n  | TFavouritesAddRecord\r\n  | TFavouritesDeleteRecord\r\n  | TSharedActions\r\n  | TFavouritesFetchingStart\r\n  | TFavouritesFetchingFinish\r\n  | TFavouritesModalFetchingStart\r\n  | TFavouritesModalFetchingFinish\r\n  | TFavouritesModalClose\r\n  | TSearchFetchingStart\r\nexport type TFavouritesThunk = ThunkAction<void, TRootState, unknown, TFavouritesActions>","import {IFavouritesItem, IFavouritesItemToServer} from \"../favourites/favouritesTypes\";\r\nimport {fakeServer} from \"./fakeServer/fakeServer\";\r\nimport {TResponse} from \"./userAPI\";\r\n\r\ntype TFavouritesListAPI = {\r\n  getList: (token: string) => Promise<TResponse<IFavouritesItem[]>>,\r\n  addRecord: (token: string, record: IFavouritesItemToServer) => Promise<TResponse<{ id: string }>>,\r\n  deleteRecord: (token: string, id: string) => Promise<TResponse<'ok'>>,\r\n  editRecord: (token: string, newRecord: IFavouritesItem) => Promise<TResponse<'ok'>>\r\n}\r\n\r\nexport const favouritesListAPI: TFavouritesListAPI = {\r\n  getList: (token) => {\r\n    return fakeServer.getFavouritesList(token)\r\n  },\r\n\r\n  addRecord: (token, record) => {\r\n    return fakeServer.favouritesListAddRecord(token, record)\r\n  },\r\n\r\n  deleteRecord: (token, id) => {\r\n    return fakeServer.favouritesListDeleteRecord(token, id)\r\n  },\r\n\r\n  editRecord: (token, newRecord) => {\r\n    return fakeServer.favouritesListEditRecord(token, newRecord)\r\n  }\r\n}","import {TSharedActions} from \"../shared/sharedTypes\"\r\nimport {TSearchOrder} from \"../api/youtubeAPI\"\r\nimport {ThunkAction} from \"redux-thunk\"\r\nimport {TRootState} from \"../rootReducer\"\r\n\r\nexport const FAVOURITES_MODAL_OPEN = 'FAVOURITES_MODAL_OPEN'\r\nexport const FAVOURITES_MODAL_CLOSE = 'FAVOURITES_MODAL_CLOSE'\r\nexport const FAVOURITES_MODAL_FETCHING_START = 'FAVOURITES_MODAL_FETCHING_START'\r\nexport const FAVOURITES_MODAL_FETCHING_FINISH = 'FAVOURITES_MODAL_FETCHING_FINISH'\r\nexport const FAVOURITES_MODAL_FILL_DATA = 'FAVOURITES_MODAL_FILL_DATA'\r\n\r\nexport type TFavouritesModalOpen = { type: typeof FAVOURITES_MODAL_OPEN, payload: {query: string} }\r\nexport type TFavouritesModalClose = { type: typeof FAVOURITES_MODAL_CLOSE }\r\nexport type TFavouritesModalFetchingStart = { type: typeof FAVOURITES_MODAL_FETCHING_START }\r\nexport type TFavouritesModalFetchingFinish = { type: typeof FAVOURITES_MODAL_FETCHING_FINISH }\r\nexport type TFavouritesModalFillData = {\r\n  type: typeof FAVOURITES_MODAL_FILL_DATA, payload: {\r\n    name: string,\r\n    sort: TSearchOrder,\r\n    maxCount: number,\r\n    id: string\r\n  }\r\n}\r\n\r\nexport type TFavouritesModalActions =\r\n  | TFavouritesModalOpen\r\n  | TFavouritesModalClose\r\n  | TFavouritesModalFetchingStart\r\n  | TFavouritesModalFetchingFinish\r\n  | TSharedActions\r\n  | TFavouritesModalFillData\r\nexport type TFavouritesModalThunk = ThunkAction<void, TRootState, unknown, TFavouritesModalActions>","import {\r\n  FAVOURITES_MODAL_CLOSE,\r\n  FAVOURITES_MODAL_FETCHING_FINISH,\r\n  FAVOURITES_MODAL_FETCHING_START,\r\n  FAVOURITES_MODAL_FILL_DATA,\r\n  FAVOURITES_MODAL_OPEN,\r\n  TFavouritesModalClose,\r\n  TFavouritesModalFetchingFinish,\r\n  TFavouritesModalFetchingStart,\r\n  TFavouritesModalFillData,\r\n  TFavouritesModalOpen,\r\n  TFavouritesModalThunk\r\n} from \"./favouritesModalTypes\";\r\nimport {TSearchOrder} from \"../api/youtubeAPI\";\r\n\r\n\r\nexport const favouritesModalFetchingStart = (): TFavouritesModalFetchingStart => ({type: FAVOURITES_MODAL_FETCHING_START})\r\nexport const favouritesModalFetchingFinish = (): TFavouritesModalFetchingFinish => ({type: FAVOURITES_MODAL_FETCHING_FINISH})\r\nexport const onFavouritesModalOpen = (query: string): TFavouritesModalOpen => ({type: FAVOURITES_MODAL_OPEN, payload: {query}})\r\nexport const onFavouritesModalClose = (): TFavouritesModalClose => ({type: FAVOURITES_MODAL_CLOSE})\r\n\r\nconst favouritesModalFillData = (\r\n  sort: TSearchOrder,\r\n  name: string,\r\n  maxCount: number,\r\n  id: string): TFavouritesModalFillData => ({\r\n  type: FAVOURITES_MODAL_FILL_DATA,\r\n  payload: {sort, name, maxCount, id}\r\n})\r\n\r\nexport const onFavouritesModalOpenEdit = (id: string): TFavouritesModalThunk => (dispatch, getState) => {\r\n  const state = getState()\r\n  const [editingItem] = state.favourites.items.filter(i => i.id === id)\r\n  dispatch(favouritesModalFillData(editingItem.sort, editingItem.name, editingItem.maxCount, editingItem.id))\r\n  dispatch(onFavouritesModalOpen(editingItem.query))\r\n}","import {\r\n  FAVOURITES_ADD_RECORD,\r\n  FAVOURITES_DELETE_RECORD,\r\n  FAVOURITES_FETCHING_FINISH,\r\n  FAVOURITES_FETCHING_START,\r\n  FAVOURITES_SET_LIST,\r\n  IFavouritesItem,\r\n  IFavouritesItemToServer,\r\n  TFavouritesAddRecord,\r\n  TFavouritesDeleteRecord,\r\n  TFavouritesFetchingFinish,\r\n  TFavouritesFetchingStart,\r\n  TFavouritesSetList,\r\n  TFavouritesThunk\r\n} from \"./favouritesTypes\";\r\nimport {favouritesListAPI} from \"../api/favouritesListAPI\";\r\nimport {onAlert, sharedClearAllStates} from \"../shared/sharedActions\";\r\nimport {\r\n  favouritesModalFetchingFinish,\r\n  favouritesModalFetchingStart,\r\n  onFavouritesModalClose\r\n} from \"../favouritesModal/favouritesModalActions\";\r\n\r\nconst favouritesFetchingStart = (): TFavouritesFetchingStart => ({type: FAVOURITES_FETCHING_START})\r\nconst favouritesFetchingFinish = (): TFavouritesFetchingFinish => ({type: FAVOURITES_FETCHING_FINISH})\r\nconst favouritesSetList = (favouritesList: IFavouritesItem[]): TFavouritesSetList => ({\r\n  type: FAVOURITES_SET_LIST,\r\n  payload: {favouritesList}\r\n})\r\nconst favouritesAddRecord = (record: IFavouritesItem): TFavouritesAddRecord => ({\r\n  type: FAVOURITES_ADD_RECORD,\r\n  payload: {record}\r\n})\r\nconst favouritesDeleteRecord = (id: string): TFavouritesDeleteRecord => ({\r\n  type: FAVOURITES_DELETE_RECORD,\r\n  payload: {id}\r\n})\r\n\r\nexport const onFavouritesListLoad = (): TFavouritesThunk => async (dispatch, getState) => {\r\n  dispatch(favouritesFetchingStart())\r\n  const token = getState().user.token\r\n  if (!token) return dispatch(sharedClearAllStates())\r\n  const result = await favouritesListAPI.getList(token)\r\n  if (!result.success) {\r\n    dispatch(onAlert(result.message, 'error'))\r\n  } else {\r\n    dispatch(favouritesSetList(result.data))\r\n  }\r\n  dispatch(favouritesFetchingFinish())\r\n}\r\n\r\nexport const onFavouritesListAddRecord = (record: IFavouritesItemToServer): TFavouritesThunk => async (dispatch, getState) => {\r\n  dispatch(favouritesModalFetchingStart())\r\n  dispatch(favouritesFetchingStart())\r\n  const token = getState().user.token\r\n  if (!token) return dispatch(sharedClearAllStates())\r\n  const result = await favouritesListAPI.addRecord(token, record)\r\n  if (result.success) {\r\n    const fullRecord: IFavouritesItem = {...record, id: result.data.id}\r\n    dispatch(favouritesAddRecord(fullRecord))\r\n  } else dispatch(onAlert(result.message, 'error'))\r\n\r\n  dispatch(favouritesModalFetchingFinish())\r\n  dispatch(favouritesFetchingFinish())\r\n  dispatch(onFavouritesModalClose())\r\n  dispatch(onAlert('запись сохранена', 'success'))\r\n}\r\n\r\nexport const onFavouritesListDeleteRecord = (id: string): TFavouritesThunk => async (dispatch, getState) => {\r\n  dispatch(favouritesFetchingStart())\r\n  const token = getState().user.token\r\n  if (!token) return dispatch(sharedClearAllStates())\r\n  const result = await favouritesListAPI.deleteRecord(token, id)\r\n  if (result.success) {\r\n    dispatch(favouritesDeleteRecord(id))\r\n  } else dispatch(onAlert(result.message, 'error'))\r\n  dispatch(favouritesFetchingFinish())\r\n}\r\n\r\nexport const onFavouritesListEditRecord = (record: IFavouritesItem): TFavouritesThunk => async (dispatch, getState) => {\r\n  dispatch(favouritesFetchingStart())\r\n  const token = getState().user.token\r\n  if (!token) return dispatch(sharedClearAllStates())\r\n  const result = await favouritesListAPI.editRecord(token, record)\r\n  if (result.success) {\r\n    dispatch(onFavouritesModalClose())\r\n    return dispatch(onFavouritesListLoad())\r\n  } else dispatch(onAlert(result.message, 'error'))\r\n  dispatch(favouritesFetchingFinish())\r\n}","import {\r\n  TUserFetchingFinish,\r\n  TUserFetchingStart,\r\n  TUserLoginData,\r\n  TUserSetToken,\r\n  TUserThunk,\r\n  USER_FETCHING_FINISH,\r\n  USER_FETCHING_START,\r\n  USER_SET_TOKEN,\r\n} from \"./userTypes\";\r\nimport {userAPI} from \"../api/userAPI\";\r\nimport {localStorageUtils} from \"../localStorageUtils\";\r\nimport {onAlert, sharedClearAllStates} from \"../shared/sharedActions\";\r\nimport {onFavouritesListLoad} from \"../favourites/favouritesActions\";\r\n\r\nconst userFetchingStart = (): TUserFetchingStart => ({type: USER_FETCHING_START})\r\nconst userFetchingFinish = (): TUserFetchingFinish => ({type: USER_FETCHING_FINISH})\r\nconst userSetToken = (token: string): TUserSetToken => ({type: USER_SET_TOKEN, payload: {token}})\r\n\r\nexport const onUserInit = (): TUserThunk => dispatch => {\r\n  const token = localStorageUtils.getToken()\r\n  if (token) {\r\n    dispatch(userSetToken(token))\r\n    dispatch(onFavouritesListLoad())\r\n  }\r\n}\r\n\r\nexport const onUserLogin = (loginData: TUserLoginData): TUserThunk => async dispatch => {\r\n  dispatch(userFetchingStart())\r\n\r\n  const result = await userAPI.login(loginData)\r\n  if (result.success) {\r\n    const token = result.data\r\n    localStorageUtils.setToken(token)\r\n    dispatch(userSetToken(token))\r\n    dispatch(onFavouritesListLoad())\r\n  } else {\r\n    dispatch(onAlert(result.message, 'error'))\r\n  }\r\n\r\n  dispatch(userFetchingFinish())\r\n}\r\n\r\nexport const onUserLogout = (): TUserThunk => dispatch => {\r\n  localStorageUtils.clearToken()\r\n  dispatch(sharedClearAllStates())\r\n}","import React, {useCallback} from 'react'\r\nimport {Button, Layout, Row} from \"antd\"\r\nimport {Menu} from \"antd\"\r\nimport cn from 'classnames'\r\nimport styles from './Header.module.css'\r\nimport LOGO from '../../sharedImgs/logo.svg'\r\nimport {Link, useLocation} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {onUserLogout} from \"../../../redux/user/userActions\";\r\n\r\nconst Header: React.FC = () => {\r\n  const {pathname} = useLocation()\r\n  const dispatch = useDispatch()\r\n  const logout = useCallback(() => {\r\n    dispatch(onUserLogout())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <Layout.Header className={styles.header}>\r\n      <Row align='middle' className='container'>\r\n        <img className={cn('logo', styles.logo)} src={LOGO}  alt='sibdev logo'/>\r\n\r\n        <Menu className={styles.menu} theme=\"light\" mode=\"horizontal\" selectedKeys={[pathname]}>\r\n          <Menu.Item key=\"/search\">\r\n            <Link to='/search'>\r\n              Поиск\r\n            </Link>\r\n          </Menu.Item>\r\n\r\n          <Menu.Item key=\"/favourites\">\r\n            <Link to='/favourites'>\r\n              Избранное\r\n            </Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n\r\n        <Button\r\n          type='link'\r\n          onClick={logout}\r\n          className={cn('ant-menu-item', styles.logout)}\r\n        >\r\n          Выйти\r\n        </Button>\r\n      </Row>\r\n    </Layout.Header>\r\n  )\r\n}\r\n\r\nexport default Header","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {Button, Col, Form, Input, InputNumber, Modal, Row, Select, Slider} from \"antd\"\r\nimport styles from './FavouriteModal.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {TRootState} from \"../../../redux/rootReducer\"\r\nimport {onFavouritesModalClose} from '../../../redux/favouritesModal/favouritesModalActions'\r\nimport {TSearchOrder} from \"../../../redux/api/youtubeAPI\"\r\nimport {onFavouritesListAddRecord, onFavouritesListEditRecord} from \"../../../redux/favourites/favouritesActions\"\r\nimport {useForm} from \"antd/lib/form/Form\"\r\nimport cn from \"classnames\"\r\n\r\ntype TFormFields = {\r\n  query: string,\r\n  maxCount: number,\r\n  name: string,\r\n  sort: TSearchOrder,\r\n}\r\n\r\nconst $sortOptions = [\r\n  {value: 'relevance', description: 'по релевантности'},\r\n  {value: 'date', description: 'по времени'},\r\n  {value: 'rating', description: 'по рейтингу'},\r\n  {value: 'title', description: 'по названию'},\r\n  {value: 'viewCount', description: 'по просмотрам'},\r\n].map((i) => <Select.Option key={i.value} value={i.value}>{i.description}</Select.Option>)\r\n\r\nconst FavouritesModal: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const [form] = useForm<TFormFields>()\r\n  const {query, isVisible, maxCount, isFetching, name, sort, recordId} = useSelector((state: TRootState) => state.favouritesModal)\r\n  const [maxCountValue, setMaxCountValue] = useState(12)\r\n\r\n  useEffect(() => {\r\n    if (isVisible) form.resetFields()\r\n  }, [form, isVisible])\r\n\r\n  useEffect(() => {\r\n    setMaxCountValue(maxCount)\r\n  }, [maxCount])\r\n\r\n  const onMaxCountChange = useCallback((value: number) => {\r\n    if (!isNaN(value)) setMaxCountValue(value)\r\n  }, [])\r\n\r\n  const onClose = useCallback(() => {\r\n    dispatch(onFavouritesModalClose())\r\n  }, [dispatch])\r\n\r\n  const onSubmit = useCallback((val: TFormFields) => {\r\n    if (recordId) {\r\n      dispatch(onFavouritesListEditRecord({...val, maxCount: maxCountValue, id: recordId}))\r\n    } else {\r\n      dispatch(onFavouritesListAddRecord({...val, maxCount: maxCountValue}))\r\n    }\r\n  }, [dispatch, maxCountValue, recordId])\r\n\r\n  const formInitialValues: TFormFields = {\r\n    maxCount: maxCount || 12,\r\n    name: name || \"\",\r\n    query: query || \"\",\r\n    sort: sort || \"\"\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      visible={isVisible}\r\n      centered={true}\r\n      closable={false}\r\n      footer={null}\r\n      getContainer={false}\r\n    >\r\n      <Row className={styles.titleBox} justify='center'>\r\n        <h1 className={styles.title}>\r\n          {\r\n            recordId\r\n              ? 'Сохранить запрос'\r\n              : 'Изменить запрос'\r\n          }\r\n        </h1>\r\n      </Row>\r\n\r\n      <Form\r\n        layout='vertical'\r\n        onFinish={onSubmit}\r\n        form={form}\r\n        initialValues={formInitialValues}\r\n      >\r\n        <Form.Item\r\n          label=\"Запрос\"\r\n          name='query'\r\n          className={cn({[styles.labelMuted]: recordId})}\r\n          rules={[{required: true, message: 'нельзя оставить поле пустым!'}]}\r\n          required={false}\r\n        >\r\n          <Input\r\n            disabled={!Boolean(recordId) || isFetching}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Название\"\r\n          name='name'\r\n          rules={[{required: true, message: 'Укажите название запроса'}]}\r\n        >\r\n          <Input\r\n            placeholder='Укажите название'\r\n            disabled={isFetching}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name='sort'\r\n          label=\"Сортировать по\"\r\n        >\r\n          <Select\r\n            className='select'\r\n            disabled={isFetching}\r\n          >\r\n            <Select.Option className={styles.firstSelectOption} value=''>Без сортировки</Select.Option>\r\n            {$sortOptions}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label='Максимальное количество'\r\n          name='maxCount'\r\n        >\r\n          <Row align='middle'>\r\n            <Col flex='auto'>\r\n              <Slider\r\n                value={maxCountValue}\r\n                onChange={onMaxCountChange}\r\n                min={0}\r\n                max={50}\r\n                disabled={isFetching}\r\n              />\r\n            </Col>\r\n\r\n            <Col flex='100px'>\r\n              <InputNumber\r\n                value={maxCountValue}\r\n                onChange={(value) => onMaxCountChange(Number(value))}\r\n                min={0}\r\n                max={50}\r\n                disabled={isFetching}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Form.Item>\r\n\r\n        <Row justify='space-between'>\r\n          <Form.Item>\r\n            <Button\r\n              className={styles.btn}\r\n              disabled={isFetching}\r\n              onClick={onClose}\r\n              htmlType=\"button\"\r\n            >\r\n              Не сохранять\r\n            </Button>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              className={styles.btn}\r\n              loading={isFetching}\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n            >\r\n              Сохранить\r\n            </Button>\r\n          </Form.Item>\r\n        </Row>\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default FavouritesModal","export const FAVOURITES = 'favourites'\r\nexport const SEARCH = 'search'\r\nexport const LOGIN = 'login'\r\nexport const TITLE_BASE = 'YouTube App'\r\nexport const URL_BASENAME = '/sibdev-youtube-app'","import {localStorageUtils} from \"../redux/localStorageUtils\"\r\nimport {useSelector} from \"react-redux\"\r\nimport {TRootState} from \"../redux/rootReducer\"\r\nimport {useCallback} from \"react\"\r\n\r\nexport const useToken = () => {\r\n  const storeToken = useSelector((state: TRootState) => state.user.token)\r\n\r\n  const getToken = useCallback(() => {\r\n    return storeToken ? storeToken : localStorageUtils.getToken()\r\n  }, [storeToken])\r\n\r\n  const token = getToken()\r\n  return [token]\r\n}\r\n","import React from 'react'\r\nimport {Layout as AntdLayout} from \"antd\"\r\nimport Header from \"./Header/Header\"\r\nimport FavouritesModal from \"./FavouritesModal/FavouritesModal\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {LOGIN} from \"../../constants\"\r\nimport {useToken} from \"../../hooks/useToken\"\r\n\r\nconst {Content} = AntdLayout\r\n\r\nconst Layout: React.FC = ({children}) => {\r\n  const [token] = useToken()\r\n  if (!token) return <Redirect to={`/${LOGIN}`}/>\r\n\r\n  return (\r\n    <AntdLayout>\r\n      <Header/>\r\n\r\n      <Content>\r\n        <div className='container'>\r\n          {children}\r\n        </div>\r\n        <FavouritesModal/>\r\n      </Content>\r\n    </AntdLayout>\r\n  )\r\n}\r\n\r\nexport default Layout","import React, {useCallback} from 'react'\r\nimport styles from './LoginForm.module.css'\r\nimport {Button, Form, Input, Row} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TRootState} from \"../../../redux/rootReducer\";\r\nimport {onUserLogin} from \"../../../redux/user/userActions\";\r\n\r\nconst LOGIN = 'LOGIN'\r\nconst PASSWORD = 'PASSWORD'\r\n\r\ntype TLoginForm = {\r\n  [LOGIN]: string,\r\n  [PASSWORD]: string\r\n}\r\n\r\nconst INPUT_VALIDATION_RULES = [\r\n  {required: true, whitespace: true, message: 'поле обязательно для заполнения'},\r\n  {max: 20, message: 'слишком длинное значение'}\r\n]\r\n\r\nconst LoginForm: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const isFetching = useSelector((state: TRootState) => state.user.isFetching)\r\n  const onFinish = useCallback((values: TLoginForm) => {\r\n    dispatch(onUserLogin({login: values[LOGIN], password: values[PASSWORD]}))\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <Form\r\n      onFinish={onFinish}\r\n      layout='vertical'\r\n      requiredMark={false}\r\n    >\r\n      <Form.Item\r\n        name={LOGIN}\r\n        rules={INPUT_VALIDATION_RULES}\r\n        label='Логин'\r\n        className='label-muted'\r\n      >\r\n        <Input disabled={isFetching}/>\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name={PASSWORD}\r\n        rules={INPUT_VALIDATION_RULES}\r\n        label='Пароль'\r\n        className='label-muted'\r\n      >\r\n        <Input.Password disabled={isFetching}/>\r\n      </Form.Item>\r\n\r\n      <Row className={styles.btnBox} justify='center'>\r\n        <Form.Item>\r\n          <Button loading={isFetching} type=\"primary\" htmlType=\"submit\">\r\n            Войти\r\n          </Button>\r\n        </Form.Item>\r\n      </Row>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default LoginForm","import React, {useEffect} from 'react'\r\nimport styles from './LoginPage.module.css'\r\nimport LOGO from '../../sharedImgs/logo.svg'\r\nimport {Col, ColProps,Row} from \"antd\";\r\nimport LoginForm from \"../LoginForm/LoginForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useToken} from \"../../../hooks/useToken\";\r\nimport {TITLE_BASE} from \"../../../constants\";\r\n\r\nconst CONTAINER_LAYOUT: ColProps = {\r\n  xxl: 7,\r\n  xl: 9,\r\n  lg: 12,\r\n  md: 16,\r\n  sm: 20,\r\n  xs: 22\r\n}\r\nconst FORM_BOX_LAYOUT: ColProps = {\r\n  sm: 15,\r\n  xs: 18\r\n}\r\n\r\nconst LoginPage: React.FC = () => {\r\n\r\n  useEffect(() => {\r\n    document.title = `${TITLE_BASE} - вход`\r\n  }, [])\r\n\r\n  const [token] = useToken()\r\n  if (token) return <Redirect to={`/`}/>\r\n\r\n  return (\r\n    <Row\r\n      justify='center'\r\n      align='middle'\r\n      style={{height: '100vh'}}\r\n    >\r\n      <Col\r\n        className={styles.container}\r\n        {...CONTAINER_LAYOUT}\r\n      >\r\n        <Row justify='center'>\r\n          <img className={styles.logo} src={LOGO} alt=\"sibDev-logo\"/>\r\n        </Row>\r\n\r\n        <Row className={styles.titleBox} justify='center'>\r\n          <h1 className={styles.title}>Вход</h1>\r\n        </Row>\r\n\r\n        <Row className={styles.formBox} justify='center'>\r\n          <Col {...FORM_BOX_LAYOUT}>\r\n            <LoginForm/>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default LoginPage","import React, {useRef} from 'react'\r\nimport styles from \"../Favourites.module.css\";\r\nimport {Button} from \"antd\";\r\n\r\ntype TFavouritesItemProps = {\r\n  name: string,\r\n  onDelete: () => void,\r\n  onEdit: () => void,\r\n  onClick: () => void\r\n}\r\n\r\nconst FavouritesItem: React.FC<TFavouritesItemProps> = ({name, onDelete, onEdit, onClick}) => {\r\n  const liRef = useRef(null)\r\n  const onClickHandler = (e: React.MouseEvent<HTMLLIElement>) => {\r\n    if (e.target === liRef.current) onClick()\r\n  }\r\n\r\n  return (\r\n    <li ref={liRef} onClick={onClickHandler} className={styles.listItem}>\r\n      {name}\r\n      <span className={styles.buttons}>\r\n            <Button\r\n              onClick={onEdit}\r\n              type='link'\r\n            >\r\n            Изменить\r\n          </Button>\r\n          <Button\r\n            onClick={onDelete}\r\n            type='link'\r\n            danger\r\n          >\r\n            Удалить\r\n          </Button>\r\n          </span>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default FavouritesItem","import React, {useEffect} from 'react'\r\nimport {Row, Spin} from \"antd\"\r\nimport styles from './Favourites.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TRootState} from \"../../../redux/rootReducer\";\r\nimport FavouritesItem from \"./FavouritesItem/FavouritesItem\";\r\nimport {onFavouritesListDeleteRecord} from \"../../../redux/favourites/favouritesActions\";\r\nimport {onFavouritesModalOpenEdit} from \"../../../redux/favouritesModal/favouritesModalActions\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {TITLE_BASE} from \"../../../constants\";\r\n\r\nconst Favourites: React.FC = () => {\r\n  useEffect(() => {\r\n    document.title = `${TITLE_BASE} - избранное`\r\n  }, [])\r\n  const dispatch = useDispatch()\r\n  let history = useHistory()\r\n  const list = useSelector((state: TRootState) => state.favourites.items)\r\n  const isFetching = useSelector((state: TRootState) => state.favourites.isFetching)\r\n\r\n\r\n  const $list = list.map((i) => (\r\n    <FavouritesItem\r\n      key={i.id}\r\n      onClick={() => history.push(`/search?q=${i.query}&sort=${i.sort}&maxCount=${i.maxCount}`)}\r\n      onEdit={() => dispatch(onFavouritesModalOpenEdit(i.id))}\r\n      onDelete={() => dispatch(onFavouritesListDeleteRecord(i.id))}\r\n      name={i.name}\r\n    />\r\n  ))\r\n\r\n  return (\r\n    <>\r\n      <Row className={styles.titleBox}>\r\n        <h1 className={styles.title}>Избранное</h1>\r\n      </Row>\r\n\r\n      <Spin spinning={isFetching} tip=\"Loading...\">\r\n        <ul className={styles.list}>\r\n          {list.length === 0 ? <Row justify='center'>список пуст :(</Row> : null}\r\n          {$list}\r\n        </ul>\r\n      </Spin>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Favourites","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react'\r\nimport {Input, Popover} from \"antd\";\r\nimport {HeartOutlined, HeartTwoTone} from \"@ant-design/icons/lib\";\r\nimport styles from './Search.module.css'\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TRootState} from \"../../../../redux/rootReducer\";\r\nimport {onFavouritesModalOpen} from \"../../../../redux/favouritesModal/favouritesModalActions\";\r\n\r\nconst HEARTH_ICON_COLOR = '#1390E5'\r\n\r\nconst $savedSuffixPopoverContent = (\r\n  <div className={styles.popoverBox}>\r\n    <div className={styles.popoverText}>Поиск сохранён в разделе «Избранное»</div>\r\n    <Link to='/favourites'>Перейти в избранное</Link>\r\n  </div>\r\n)\r\n\r\nconst Search: React.FC = () => {\r\n  let history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const isFetching = useSelector((state: TRootState) => state.search.isFetching)\r\n  const currentQuery = useSelector((state: TRootState) => state.search.query)\r\n  const isReadyToShow = useSelector((state: TRootState) => state.search.isReadyToShow)\r\n  const isSavedMessageVisible = useSelector((state: TRootState) => state.favourites.isSavedMessageVisible)\r\n  const [query, setQuery] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (!currentQuery) return\r\n    setQuery(currentQuery)\r\n  }, [currentQuery])\r\n\r\n  const submitHandler = useCallback(() => {\r\n    history.push(`/search?q=${query}`)\r\n  }, [history, query])\r\n\r\n  const inputHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(e.target.value)\r\n  }, [])\r\n\r\n  const onOpenModal = useCallback(() => {\r\n    if (!currentQuery) return\r\n    dispatch(onFavouritesModalOpen(currentQuery))\r\n  }, [currentQuery, dispatch])\r\n\r\n  const $suffix = (\r\n    <Popover\r\n      content={$savedSuffixPopoverContent}\r\n      visible={isSavedMessageVisible}\r\n      placement=\"bottom\"\r\n    >\r\n      {\r\n        isSavedMessageVisible\r\n          ? <HeartTwoTone style={{color: HEARTH_ICON_COLOR}}/>\r\n          : isReadyToShow\r\n          ? <HeartOutlined onClick={onOpenModal} style={{color: HEARTH_ICON_COLOR}}/>\r\n          : null\r\n      }\r\n    </Popover>\r\n  )\r\n\r\n  return (\r\n    <Input.Search\r\n      value={query}\r\n      onChange={inputHandler}\r\n      placeholder=\"Что хотите посмотреть?\"\r\n      enterButton=\"Найти\"\r\n      suffix={$suffix}\r\n      onSearch={submitHandler}\r\n      loading={isFetching}\r\n      required\r\n    />\r\n  )\r\n}\r\n\r\nexport default Search","import React from 'react'\r\nimport styles from './VideoItem.module.css'\r\nimport cn from \"classnames\";\r\n\r\nexport type TVideoItemProps = {\r\n  previewURL: string,\r\n  title: string,\r\n  channelName: string,\r\n  views: string,\r\n  viewMode: 'card' | 'list'\r\n}\r\n\r\nconst VideoItem: React.FC<TVideoItemProps> = ({views, channelName, title, previewURL, viewMode}) => {\r\n  const isCardMode = viewMode === 'card'\r\n  if (isCardMode && title.length >= 60) title = title.substr(0, 57) + '...'\r\n  return (\r\n    <div className={cn(styles.container, 'ant-card-hoverable', {[styles.card]: isCardMode})}>\r\n      <img className={styles.preview} src={previewURL} alt={title}/>\r\n\r\n      <div className={styles.body}>\r\n        <div className={styles.title}>\r\n          {title}\r\n        </div>\r\n\r\n        <div>\r\n          <div className={styles.channelName}>\r\n            {channelName}\r\n          </div>\r\n\r\n          <div className={styles.views}>\r\n            {views} просмотров\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoItem","import React, {useEffect, useState} from 'react'\r\nimport {Button, Col, Row} from \"antd\";\r\nimport cn from \"classnames\";\r\nimport styles from './VideoList.module.css'\r\nimport {AppstoreOutlined, UnorderedListOutlined} from \"@ant-design/icons/lib\";\r\nimport VideoItem from \"./VideoItem/VideoItem\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {TRootState} from \"../../../../redux/rootReducer\";\r\nimport {useLastViewMode} from \"../../../../hooks/useVideoListLastViewMode\";\r\n\r\nconst VideoList: React.FC = () => {\r\n  const lastViewMode = useLastViewMode()\r\n  const [viewMode, setViewMode] = useState<'list' | 'card'>(lastViewMode || 'card')\r\n  const videos = useSelector((state: TRootState) => state.search.videos)\r\n  const query = useSelector((state: TRootState) => state.search.query)\r\n  const totalResults = useSelector((state: TRootState) => state.search.totalResults)\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('viewMode', viewMode)\r\n  }, [viewMode])\r\n\r\n  const $videoList = videos?.map((videoItem) => {\r\n    const views = videoItem.views\r\n    let viewsStr = String(views)\r\n    if (views >= 1000 && views < 1000000) viewsStr = viewsStr.substr(0, viewsStr.length - 3) + ' тыс.'\r\n    if (views >= 1000000) viewsStr = viewsStr.substr(0, viewsStr.length - 6) + ' млн.'\r\n    return (\r\n      <Col key={videoItem.id.videoId}>\r\n        <VideoItem\r\n          viewMode={viewMode}\r\n          title={videoItem.snippet.title}\r\n          views={viewsStr}\r\n          channelName={videoItem.snippet.channelTitle}\r\n          previewURL={videoItem.snippet.thumbnails.medium.url}\r\n        />\r\n      </Col>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <Row align='middle' justify='space-between'>\r\n        <Col>\r\n          <span className={styles.listTitle}>\r\n            Видео по запросу <strong>«{query}»</strong>\r\n          </span>\r\n          <span className={styles.count}>\r\n            {totalResults}\r\n          </span>\r\n        </Col>\r\n        <Col>\r\n          <Button\r\n            onClick={() => setViewMode('list')}\r\n            className={styles.btn}\r\n            type='link'\r\n          >\r\n            <UnorderedListOutlined\r\n              className={cn(\r\n                styles.viewSelectorIcon,\r\n                {[styles.viewSelectorIcon_selected]: viewMode === 'list'}\r\n              )}\r\n            />\r\n          </Button>\r\n          <Button\r\n            onClick={() => setViewMode(\"card\")}\r\n            className={styles.btn}\r\n            type='link'\r\n          >\r\n            <AppstoreOutlined\r\n              className={cn(\r\n                styles.viewSelectorIcon,\r\n                {[styles.viewSelectorIcon_selected]: viewMode === 'card'}\r\n              )}\r\n            />\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={[20, 32]}>{$videoList}</Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VideoList","export const useLastViewMode = () => {\r\n  const lastViewMode = localStorage.getItem('viewMode')\r\n  if (!lastViewMode || (lastViewMode !== 'list' && lastViewMode !== 'card')) return false\r\n  return lastViewMode\r\n}","import {IVideoItem} from \"../api/youtubeAPI\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {TRootState} from \"../rootReducer\";\r\nimport {TSharedActions} from \"../shared/sharedTypes\";\r\n\r\nexport const SEARCH_FETCHING_START = 'SEARCH_FETCHING_START'\r\nexport const SEARCH_FETCHING_FINISH = 'SEARCH_FETCHING_FINISH'\r\nexport const SEARCH_SET_VIDEOS = 'SEARCH_SET_VIDEOS'\r\nexport const SEARCH_SET_QUERY = 'SEARCH_SET_QUERY'\r\nexport const SEARCH_SET_TOTAL_RESULTS = 'SEARCH_SET_TOTAL_RESULTS'\r\nexport const SEARCH_SET_READY_TO_SHOW = 'SEARCH_SET_READY_TO_SHOW'\r\n\r\nexport type TSearchFetchingStart = { type: typeof SEARCH_FETCHING_START }\r\nexport type TSearchFetchingFinish = { type: typeof SEARCH_FETCHING_FINISH }\r\nexport type TSearchSetReadyToShow = { type: typeof SEARCH_SET_READY_TO_SHOW }\r\nexport type TSearchSetQuery = { type: typeof SEARCH_SET_QUERY, payload: { query: string } }\r\nexport type TSearchSetTotalResults = { type: typeof SEARCH_SET_TOTAL_RESULTS, payload: { totalResults: number } }\r\nexport type TSearchSetVideos = { type: typeof SEARCH_SET_VIDEOS, payload: { videos: IVideoItem[] } }\r\n\r\nexport type TSearchActions =\r\n  TSearchFetchingStart\r\n  | TSearchFetchingFinish\r\n  | TSearchSetVideos\r\n  | TSearchSetQuery\r\n  | TSearchSetTotalResults\r\n  | TSearchSetReadyToShow\r\n  | TSharedActions\r\n\r\nexport type TSearchThunk = ThunkAction<void, TRootState, unknown, TSearchActions>","import axios from \"axios\"\r\n\r\nconst YOUTUBE_API_KEY = 'AIzaSyD4oqFUtrWe9IFK0dnrOrhLTGwYeVjt2eM'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://youtube.googleapis.com/youtube/v3/',\r\n  // baseURL: 'http://127.0.0.1:5555/',\r\n})\r\n\r\nexport type TSearchOrder = 'date' | 'rating' | 'relevance' | 'title' | 'viewCount' | ''\r\n\r\ntype TVideoItemThumbnail = {\r\n  url: string,\r\n  width: number,\r\n  height: number\r\n}\r\n\r\nexport interface IYoutubeVideoItemResponse {\r\n  kind: string,\r\n  etag: string,\r\n  id: {\r\n    kind: string,\r\n    videoId: string\r\n  }\r\n  snippet: {\r\n    publishedAt: string,\r\n    channelId: string,\r\n    title: string,\r\n    description: string,\r\n    thumbnails: {\r\n      default: TVideoItemThumbnail,\r\n      medium: TVideoItemThumbnail,\r\n      high: TVideoItemThumbnail\r\n    },\r\n    channelTitle: string,\r\n    liveBroadcastContent: string,\r\n    publishTime: string\r\n  }\r\n}\r\n\r\nexport interface IVideoItem extends IYoutubeVideoItemResponse {\r\n  views: number\r\n}\r\n\r\nexport type TYoutubeVideoStatisticResponse = {\r\n  kind: string,\r\n  etag: string,\r\n  id: string,\r\n  statistics: {\r\n    viewCount: string,\r\n    likeCount: string,\r\n    dislikeCount: string,\r\n    favoriteCount: string\r\n  }\r\n}\r\n\r\ninterface IYoutubeGenericResponse {\r\n  error?: false,\r\n  kind: string,\r\n  etag: string,\r\n  pageInfo: {\r\n    totalResults: number,\r\n    resultsPerPage: number\r\n  }\r\n}\r\n\r\ninterface IYoutubeSearchResponse extends IYoutubeGenericResponse {\r\n  nextPageToken: string,\r\n  regionCode: string,\r\n  items: IYoutubeVideoItemResponse[]\r\n}\r\n\r\ninterface IYoutubeVideosResponse extends IYoutubeGenericResponse {\r\n  items: TYoutubeVideoStatisticResponse[]\r\n}\r\n\r\ntype TYoutubeErrorItem = {\r\n  message: string,\r\n  domain: string,\r\n  reason: string\r\n}\r\n\r\ntype TYoutubeErrorResponse = {\r\n  error: {\r\n    code: number,\r\n    message: string,\r\n    errors: TYoutubeErrorItem[]\r\n  }\r\n}\r\n\r\ntype TYoutubeSearchAPI = {\r\n  search: (query: string, maxResults?: number, order?: TSearchOrder) => Promise<IYoutubeSearchResponse | TYoutubeErrorResponse>,\r\n  getVideoStat: (ids: Array<string>) => Promise<IYoutubeVideosResponse | TYoutubeErrorResponse>\r\n}\r\n\r\nexport const youtubeSearchAPI: TYoutubeSearchAPI = {\r\n  search: (query, maxResults = 12, order = '') => {\r\n    query = encodeURIComponent(query)\r\n    let searchParams = `&part=snippet&key=${YOUTUBE_API_KEY}&q=${query}&maxResults=${maxResults}&type=video`\r\n    if (order) searchParams += `&order=${order}`\r\n    return instance.get(`/search?channelType=any${searchParams}`).then(res => res.data).catch(e => e.response.data)\r\n  },\r\n\r\n  getVideoStat: (ids) =>{\r\n    return instance.get(`/videos?id=${ids}&part=statistics&key=${YOUTUBE_API_KEY}`).then(res => res.data).catch(e => e.response.data)\r\n  }\r\n}\r\n","import {\r\n  SEARCH_FETCHING_FINISH,\r\n  SEARCH_FETCHING_START,\r\n  SEARCH_SET_QUERY,\r\n  SEARCH_SET_READY_TO_SHOW,\r\n  SEARCH_SET_TOTAL_RESULTS,\r\n  SEARCH_SET_VIDEOS,\r\n  TSearchFetchingFinish,\r\n  TSearchFetchingStart,\r\n  TSearchSetQuery,\r\n  TSearchSetReadyToShow,\r\n  TSearchSetTotalResults,\r\n  TSearchSetVideos,\r\n  TSearchThunk\r\n} from \"./searchTypes\";\r\nimport {TSearchOrder, youtubeSearchAPI, IVideoItem} from \"../api/youtubeAPI\";\r\nimport {onAlert} from \"../shared/sharedActions\";\r\n\r\nconst searchFetchingStart = (): TSearchFetchingStart => ({type: SEARCH_FETCHING_START})\r\nconst searchFetchingFinish = (): TSearchFetchingFinish => ({type: SEARCH_FETCHING_FINISH})\r\nconst searchSetReadyToShow = (): TSearchSetReadyToShow => ({type: SEARCH_SET_READY_TO_SHOW})\r\nconst searchSetVideos = (videos: IVideoItem[]): TSearchSetVideos => ({type: SEARCH_SET_VIDEOS, payload: {videos}})\r\nconst searchSetQuery = (query: string): TSearchSetQuery => ({type: SEARCH_SET_QUERY, payload: {query}})\r\nconst searchSetTotalResults = (totalResults: number): TSearchSetTotalResults => ({type: SEARCH_SET_TOTAL_RESULTS, payload: {totalResults}})\r\n\r\n\r\n\r\n\r\n\r\nexport const onSearch = (query: string, maxResults?: number, order?: TSearchOrder): TSearchThunk => async dispatch => {\r\n  function error(error: string) {\r\n    dispatch(searchFetchingFinish())\r\n    return dispatch(onAlert(error, 'error'))\r\n  }\r\n\r\n  dispatch(searchFetchingStart())\r\n  dispatch(searchSetQuery(query))\r\n  const videosResult = await youtubeSearchAPI.search(query, maxResults, order)\r\n  if (videosResult.error) return error(videosResult.error.message)\r\n\r\n  const videoIds = videosResult.items.map(i => i.id.videoId)\r\n\r\n  const videosStatResult = await youtubeSearchAPI.getVideoStat(videoIds)\r\n  if (videosStatResult.error) return error(videosStatResult.error.message)\r\n\r\n  const resultVideoList: IVideoItem[] = videosResult.items.map(i => {\r\n    i.snippet.title = i.snippet.title.replaceAll('&amp;', '&')\r\n    i.snippet.channelTitle = i.snippet.channelTitle.replaceAll('&amp;', '&')\r\n\r\n    const id = i.id.videoId\r\n    const [videoStat] = videosStatResult.items.filter(ivs => ivs.id === id)\r\n    return {...i, views: Number(videoStat.statistics.viewCount)}\r\n  })\r\n\r\n  dispatch(searchSetTotalResults(videosResult.pageInfo.totalResults))\r\n  dispatch(searchSetVideos(resultVideoList))\r\n  dispatch(searchSetReadyToShow())\r\n  dispatch(searchFetchingFinish())\r\n}","import React, {useEffect} from 'react'\r\nimport {Col, Row} from \"antd\"\r\nimport Search from \"./Search/Search\"\r\nimport VideoList from \"./VideoList/VideoList\"\r\nimport {useQuery} from \"../../../hooks/useQuery\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {TRootState} from \"../../../redux/rootReducer\"\r\nimport {onSearch} from \"../../../redux/search/searchActions\"\r\nimport {TSearchOrder} from \"../../../redux/api/youtubeAPI\"\r\nimport styles from './SearchPage.module.css'\r\nimport cn from \"classnames\"\r\nimport {TITLE_BASE} from \"../../../constants\";\r\n\r\nconst SearchPage: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n  const searchParams = useQuery()\r\n  const currentQuery = searchParams.get('q')\r\n  const sort = (searchParams.get('sort') as TSearchOrder) || ''\r\n  const maxCount: number = Number(searchParams.get('maxCount')) || 12\r\n  const isReadyToShow = useSelector((state: TRootState) => state.search.isReadyToShow)\r\n\r\n  useEffect(() => {\r\n    if (currentQuery) {\r\n      document.title = `${TITLE_BASE} - поиск: ${currentQuery}`\r\n    } else {\r\n      document.title = `${TITLE_BASE} - Поиск`\r\n    }\r\n  }, [currentQuery])\r\n\r\n  useEffect(() => {\r\n    if (!currentQuery) return\r\n    dispatch(onSearch(currentQuery, maxCount, sort))\r\n  }, [currentQuery, dispatch, maxCount, sort])\r\n\r\n  const searchColSpan = isReadyToShow ? 24 : 12\r\n  return (\r\n    <>\r\n      <Row className={cn(styles.controlBox, {[styles.minified]: isReadyToShow})} justify='center' align='middle'>\r\n        <Col span={searchColSpan}>\r\n          <Row className={styles.titleBox} justify='center'>\r\n            <h1 className={styles.title}>Поиск видео</h1>\r\n          </Row>\r\n\r\n          <Row justify='center'>\r\n            <Search />\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      {isReadyToShow && <VideoList />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SearchPage","import { useLocation } from \"react-router-dom\";\r\n\r\nexport const useQuery = () => {\r\n  return new URLSearchParams(useLocation().search);\r\n}","import React, {useEffect} from 'react'\r\nimport './globalCss/antdOverload.GLOBAL.css'\r\nimport './globalCss/App.GLOBAL.css'\r\nimport Layout from \"./Components/Layout/Layout\"\r\nimport {Switch, Route, HashRouter, Redirect} from \"react-router-dom\";\r\nimport LoginPage from \"./Components/Login/LoginPage/LoginPage\"\r\nimport {FAVOURITES, LOGIN, SEARCH, URL_BASENAME} from \"./constants\";\r\nimport {useAlert} from \"./hooks/useAlert\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {onUserInit} from \"./redux/user/userActions\";\r\nimport Favourites from \"./Components/Layout/Favourites/Favourites\";\r\nimport SearchPage from \"./Components/Layout/SearchPage/SearchPage\";\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    dispatch(onUserInit())\r\n  }, [dispatch])\r\n  useAlert()\r\n  return (\r\n    <HashRouter basename={`${URL_BASENAME}`}>\r\n      <Switch>\r\n        <Route path={`/${LOGIN}`}>\r\n          <LoginPage/>\r\n        </Route>\r\n\r\n        <Layout>\r\n          <Switch>\r\n            <Route path={`/${FAVOURITES}`}>\r\n              <Favourites/>\r\n            </Route>\r\n\r\n            <Route path={`/${SEARCH}`}>\r\n              <SearchPage/>\r\n            </Route>\r\n\r\n            <Route>\r\n              <Redirect to={`/${SEARCH}`}/>\r\n            </Route>\r\n          </Switch>\r\n        </Layout>\r\n      </Switch>\r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default App","import {useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {TRootState} from \"../redux/rootReducer\";\r\nimport { message as alert} from 'antd';\r\n\r\nexport const useAlert = () => {\r\n  const message = useSelector((state: TRootState) => state.alert.message)\r\n  const type = useSelector((state: TRootState) => state.alert.type)\r\n  const duration = useSelector((state: TRootState) => state.alert.duration)\r\n\r\n  useEffect(() => {\r\n    if (!type || !duration || !message) return\r\n    alert[type](message, duration)\r\n  }, [duration, message, type])\r\n}","import {\r\n  TUserActions,\r\n  USER_FETCHING_START,\r\n  USER_FETCHING_FINISH,\r\n  USER_SET_TOKEN\r\n} from \"./userTypes\";\r\nimport {CLEAR_ALL_STATES} from \"../shared/sharedTypes\";\r\nimport {Reducer} from \"redux\";\r\n\r\nconst initialState = {\r\n  isFetching: false as boolean,\r\n  token: null as null | string,\r\n}\r\n\r\ntype TUserReducerState = typeof initialState\r\n\r\nconst userReducer: Reducer<TUserReducerState, TUserActions> = (state = initialState, action): TUserReducerState => {\r\n  switch (action.type) {\r\n    case CLEAR_ALL_STATES:\r\n      return initialState\r\n    case USER_FETCHING_START:\r\n      return {...state, isFetching: true}\r\n    case USER_FETCHING_FINISH:\r\n      return {...state, isFetching: false}\r\n    case USER_SET_TOKEN:\r\n      return {...state, token: action.payload.token}\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default userReducer","import {Reducer} from \"redux\";\r\nimport {\r\n  SEARCH_FETCHING_FINISH,\r\n  SEARCH_FETCHING_START,\r\n  SEARCH_SET_QUERY, SEARCH_SET_READY_TO_SHOW, SEARCH_SET_TOTAL_RESULTS,\r\n  SEARCH_SET_VIDEOS,\r\n  TSearchActions\r\n} from \"./searchTypes\";\r\nimport {IVideoItem} from \"../api/youtubeAPI\";\r\nimport {CLEAR_ALL_STATES} from \"../shared/sharedTypes\";\r\n\r\nconst initialState = {\r\n  isFetching: false as boolean,\r\n  query: null as string | null,\r\n  totalResults: null as number | null,\r\n  videos: null as null | IVideoItem[],\r\n  isReadyToShow: false as boolean,\r\n  errorMessage: null as null | string\r\n}\r\n\r\ntype TSearchState = typeof initialState\r\n\r\nconst searchReducer: Reducer<TSearchState, TSearchActions> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SEARCH_FETCHING_START:\r\n      return {...initialState, isFetching: true, isReadyToShow: state.isReadyToShow}\r\n    case CLEAR_ALL_STATES:\r\n      return initialState\r\n    case SEARCH_SET_QUERY:\r\n      return {...state, query: action.payload.query}\r\n    case SEARCH_SET_READY_TO_SHOW:\r\n      return {...state, isReadyToShow: true}\r\n    case SEARCH_SET_TOTAL_RESULTS:\r\n      return {...state, totalResults: action.payload.totalResults}\r\n    case SEARCH_FETCHING_FINISH:\r\n      return {...state, isFetching: false}\r\n    case SEARCH_SET_VIDEOS:\r\n      return {...state, videos: action.payload.videos}\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default searchReducer","import {\r\n  CLEAR_ALERT_MESSAGE,\r\n  CLEAR_ALL_STATES,\r\n  SET_ALERT_MESSAGE,\r\n  TSharedActions,\r\n  TSharedAlertTypes\r\n} from \"../shared/sharedTypes\";\r\nimport {Reducer} from \"redux\";\r\n\r\nconst initialState = {\r\n  message: null as null | string,\r\n  type: null as null | TSharedAlertTypes,\r\n  duration: null as null | number\r\n}\r\n\r\ntype TAlertState = typeof initialState\r\n\r\nconst alertReducer: Reducer<TAlertState, TSharedActions> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ALERT_MESSAGE:\r\n      return {message: action.payload.message, type: action.payload.type, duration: action.payload.duration}\r\n    case CLEAR_ALERT_MESSAGE:\r\n      return initialState\r\n    case CLEAR_ALL_STATES:\r\n      return initialState\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default alertReducer","import {Reducer} from \"redux\";\r\nimport {\r\n  FAVOURITES_ADD_RECORD, FAVOURITES_DELETE_RECORD,\r\n  FAVOURITES_FETCHING_FINISH,\r\n  FAVOURITES_FETCHING_START,\r\n  FAVOURITES_SET_LIST,\r\n  TFavouritesActions,\r\n  IFavouritesItem\r\n} from \"./favouritesTypes\";\r\nimport {CLEAR_ALL_STATES} from \"../shared/sharedTypes\";\r\nimport {SEARCH_FETCHING_START} from \"../search/searchTypes\";\r\n\r\nconst initialState = {\r\n  isFetching: false as boolean,\r\n  items: [] as IFavouritesItem[],\r\n  isSavedMessageVisible: false as boolean\r\n}\r\n\r\ntype TFavouritesState = typeof initialState\r\n\r\nconst favouritesReducer: Reducer<TFavouritesState, TFavouritesActions> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CLEAR_ALL_STATES:\r\n      return initialState\r\n    case FAVOURITES_FETCHING_START:\r\n      return {...state, isFetching: true}\r\n    case FAVOURITES_FETCHING_FINISH:\r\n      return {...state, isFetching: false}\r\n    case FAVOURITES_SET_LIST:\r\n      return {...state, items: action.payload.favouritesList}\r\n    case FAVOURITES_ADD_RECORD:\r\n      return {...state, items: [...state.items, action.payload.record], isSavedMessageVisible: true}\r\n    case FAVOURITES_DELETE_RECORD:\r\n      const filteredList = state.items.filter((i) => i.id !== action.payload.id)\r\n      return {...state, items: filteredList}\r\n    case SEARCH_FETCHING_START:\r\n      return {...state, isSavedMessageVisible: false}\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default favouritesReducer","import {\r\n  FAVOURITES_MODAL_CLOSE,\r\n  FAVOURITES_MODAL_FETCHING_FINISH,\r\n  FAVOURITES_MODAL_FETCHING_START,\r\n  FAVOURITES_MODAL_FILL_DATA, FAVOURITES_MODAL_OPEN,\r\n  TFavouritesModalActions\r\n} from \"./favouritesModalTypes\";\r\nimport {CLEAR_ALL_STATES} from \"../shared/sharedTypes\";\r\nimport {Reducer} from \"redux\";\r\nimport {TSearchOrder} from \"../api/youtubeAPI\";\r\n\r\nconst initialState = {\r\n  isFetching: false as boolean,\r\n  isVisible: false as boolean,\r\n  recordId: null as null | string,\r\n  query: null as null | string,\r\n  name: null as null | string,\r\n  sort: '' as TSearchOrder,\r\n  maxCount: 12 as number,\r\n}\r\n\r\nexport type TFavouritesModalState = typeof initialState\r\n\r\nconst favouritesModalReducer: Reducer<TFavouritesModalState, TFavouritesModalActions> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CLEAR_ALL_STATES:\r\n      return initialState\r\n    case FAVOURITES_MODAL_FETCHING_START:\r\n      return {...state, isFetching: true}\r\n    case FAVOURITES_MODAL_FETCHING_FINISH:\r\n      return {...state, isFetching: false}\r\n    case FAVOURITES_MODAL_OPEN:\r\n      return {...state, isVisible: true, query: action.payload.query}\r\n    case FAVOURITES_MODAL_CLOSE:\r\n      return initialState\r\n    case FAVOURITES_MODAL_FILL_DATA:\r\n      const {maxCount, name, sort, id} = action.payload\r\n      return {...state, maxCount, name, sort, recordId: id}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default favouritesModalReducer","import {combineReducers} from \"redux\";\r\nimport user from \"./user/userReducer\";\r\nimport search from \"./search/searchReducer\";\r\nimport alert from \"./alert/alertReducer\";\r\nimport favourites from \"./favourites/favouritesReducer\";\r\nimport favouritesModal from \"./favouritesModal/favouritesModalReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  user,\r\n  search,\r\n  alert,\r\n  favourites,\r\n  favouritesModal\r\n})\r\n\r\nexport type TRootState = ReturnType<typeof rootReducer>\r\nexport default rootReducer","import 'antd/dist/antd.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport {applyMiddleware, createStore} from \"redux\";\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport rootReducer from \"./redux/rootReducer\";\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\nconst app = (\n  <Provider store={store}>\n      <App />\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnBox\":\"LoginForm_btnBox__1rH4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listTitle\":\"VideoList_listTitle__1Ylc1\",\"count\":\"VideoList_count__WOcRG\",\"btn\":\"VideoList_btn__2jeC9\",\"viewSelectorIcon\":\"VideoList_viewSelectorIcon__3mtJf\",\"viewSelectorIcon_selected\":\"VideoList_viewSelectorIcon_selected__apM58\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"VideoItem_card__2hI_Y\",\"preview\":\"VideoItem_preview__2CqCL\",\"body\":\"VideoItem_body__1GaRX\",\"title\":\"VideoItem_title__3iPxr\",\"container\":\"VideoItem_container__1MaRF\",\"channelName\":\"VideoItem_channelName__45hni\",\"views\":\"VideoItem_views__kbyzL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleBox\":\"Favourites_titleBox__1Ynjh\",\"title\":\"Favourites_title__2S2VF\",\"list\":\"Favourites_list__2bKSR\",\"listItem\":\"Favourites_listItem__vNVdk\",\"buttons\":\"Favourites_buttons__vkA_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleBox\":\"FavouriteModal_titleBox__3P0Rj\",\"title\":\"FavouriteModal_title__34fvv\",\"btn\":\"FavouriteModal_btn__20ViI\",\"firstSelectOption\":\"FavouriteModal_firstSelectOption__2x63A\",\"labelMuted\":\"FavouriteModal_labelMuted__2Qynj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LoginPage_container__3bocI\",\"titleBox\":\"LoginPage_titleBox__35oY9\",\"title\":\"LoginPage_title__v_JCg\",\"formBox\":\"LoginPage_formBox__3V-pN\",\"logo\":\"LoginPage_logo__2w5_s\"};"],"sourceRoot":""}